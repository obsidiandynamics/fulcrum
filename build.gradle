plugins {
  id "com.github.ben-manes.versions" version "0.22.0"
  id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
      snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
      username = findProperty('sonatype.username')
      password = findProperty('sonatype.password')
    }
  }
}
  
def baseJvmArgs = [
  "--add-opens=java.base/java.io=ALL-UNNAMED",
  "--add-opens=java.base/java.lang=ALL-UNNAMED",
  "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
  "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
  "--add-opens=java.base/java.nio=ALL-UNNAMED",
  "--add-opens=java.base/java.nio.channels.spi=ALL-UNNAMED",
  "--add-opens=java.base/java.util=ALL-UNNAMED",
  "--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED",
  "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
  "-XX:-MaxFDLimit"
]
project.ext.set("baseJvmArgs", baseJvmArgs)

allprojects {
  apply plugin: "java-library"
  apply plugin: "jacoco"
  apply plugin: 'maven-publish'
  apply plugin: 'signing'

  group = "com.obsidiandynamics.fulcrum"
  version = "0.37.0"
  
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  //TODO remove when Javadoc errors have been resolved
  javadoc.options.addStringOption('Xdoclint:none', '-quiet')

  repositories {
    mavenCentral()
    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots"
    }
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }

  signing {
    sign publishing.publications
  }
  
  ext {
    antVersion = "1.10.6"
    assertjVersion = "3.13.2"
    chronicleQueueVersion = "5.23ea24"
    equalsverifierVersion = "3.10"
    glassfishELVersion = "3.0.1-b11"
    hamcrestVersion = "2.1"
    hibernateValidatorVersion = "6.0.13.Final"
    httpasyncclientVersion = "4.1.4"
    httpclientVersion = "4.5.9"
    jacksonVersion = "2.9.9"
    jgroupsVersion = "4.1.2.Final"
    jmhVersion = "1.21"
    junitVersion = "4.12"
    kryoVersion = "5.0.0-RC4"
    log4jVersion = "1.2.17"
    mockitoVersion = "3.0.0"
    pojotesterVersion = "0.9.0"
    slf4jVersion = "1.7.25"
    undertowVersion = "2.0.25.Final"
    validationApiVersion = "2.0.1.Final"
    wiremockVersion = "2.24.1"
  }
  
  dependencies {
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "com.obsidiandynamics.pojotester:core:${pojotesterVersion}"
    testImplementation "nl.jqno.equalsverifier:equalsverifier:${equalsverifierVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "org.hamcrest:hamcrest-library:${hamcrestVersion}"
  }
  
  compileJava {
    options.compilerArgs += "-proc:none"
    options.compilerArgs += "-Xlint:unchecked"
  }

  compileTestJava {
    options.compilerArgs += "-proc:none"
    options.compilerArgs += "-Xlint:unchecked"
  }
  
  tasks.withType(JavaCompile) {
    options.fork = true
    options.incremental = true
  }

  test {
    exclude "**/*IT.class"
    jvmArgs += baseJvmArgs
    
    testLogging {
      info.events = ["started", "failed", "skipped", "passed"]
    }
  }
  
  task integrationTest(type: Test, description: "Runs integration tests", group: "Verification") {
    include "**/*IT.class"
    jvmArgs += baseJvmArgs
    
    testLogging {
      info.events = ["started", "failed", "skipped", "passed"]
    }
  }

  jacoco {
    toolVersion = "0.8.8"
  }
  
  task verify {  
    dependsOn test
    dependsOn integrationTest
  }

  jacocoTestReport {
    additionalSourceDirs.from = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(sourceSets.main.output)
    executionData.from = files("$buildDir/jacoco/test.exec") + file("$buildDir/jacoco/integrationTest.exec")
    reports {
      html.enabled true
      xml.enabled true
      csv.enabled false
    }
  }

  javadoc {
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
      options.addStringOption("quiet", "-html5")
    }
  }
}

subprojects {
}

task jacocoMerge(type: JacocoMerge) {
  mustRunAfter = subprojects.test + subprojects.integrationTest
  executionData = files(subprojects.jacocoTestReport.executionData)
  doFirst {
    executionData = files(files(subprojects.jacocoTestReport.executionData).findAll { it.exists() })
  }
}

task jacocoRootReport(type: JacocoReport) {
  dependsOn jacocoMerge
  mustRunAfter = subprojects.test + subprojects.integrationTest
  additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories.from = files(subprojects.sourceSets.main.output)
  executionData jacocoMerge.destinationFile
  reports {
    html.enabled true
    xml.enabled true
    csv.enabled false
  }
  onlyIf = {
    true
  }
  afterEvaluate {
    classDirectories.from = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: ["sample/**", "**/*Uncovered*", "**/generated/**"])
    })
  }
}

//def packageName = "fulcrum-core"
//
//jar {
//  baseName packageName
//  finalizedBy jacocoRootReport
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//  baseName packageName
//  classifier = "javadoc"
//  from "$buildDir/docs/javadoc"
//}
//
//task sourcesJar(type: Jar) {
//  baseName packageName
//  from sourceSets.main.allSource
//  classifier = "sources"
//}
//
//artifacts {
//  archives jar
//  archives javadocJar
//  archives sourcesJar
//}
//
//publishing {
//  publications {
//    mavenJava(MavenPublication) {
//      groupId project(":").group
//      artifactId packageName
//      version project(":").version
//      from components.java
//      artifact sourcesJar
//      artifact javadocJar
//    }
//  }
//  repositories {
//    maven {
//      url "${project(':').projectDir}/../repo"
//    }
//  }
//}

//def packageDesc = "Core package"
//def repoName = "fulcrum"
//bintray {
//  user = System.getenv(envUser)
//  key = System.getenv(envKey)
//  publications = ["mavenJava"]
//  pkg {
//    repo = "${repoName}"
//    name = packageName
//    userOrg = "obsidiandynamics"
//    desc = packageDesc
//    websiteUrl = "https://github.com/obsidiandynamics/${repoName}"
//    licenses = ["BSD New"]
//    vcsUrl = "https://github.com/obsidiandynamics/${repoName}"
//    issueTrackerUrl = "https://github.com/obsidiandynamics/${repoName}/issues"
//    publicDownloadNumbers = true
//    githubRepo = "obsidiandynamics/${repoName}"
//    override = true
//    publish = true
//    version {
//      name = project(":").version
//      desc = packageDesc
//      released  = new Date()
//      vcsTag = project(":").version
//    }
//  }
//}
