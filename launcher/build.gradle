def packageName = "fulcrum-launcher"
def packageDescription = "Launch applications from Gradle"

dependencies {
  api project(":fulcrum-func")
  api project(":fulcrum-props")
  api project(":fulcrum-resolver")

  testImplementation project(":fulcrum-assert")
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = packageName
      from components.java
      pom {
        name = packageName
        description = packageDescription
        url = 'https://github.com/obsidiandynamics/fulcrum'
        licenses {
          license {
            name = 'BSD 3-Clause License'
            url = 'https://opensource.org/licenses/BSD-3-Clause'
          }
        }
        developers {
          developer {
            id = 'ekoutanov'
            name = 'Emil Koutanov'
            email = 'ekoutanov@gmail.com'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/obsidiandynamics/fulcrum.git'
          developerConnection = 'scm:git:ssh://github.com/obsidiandynamics/fulcrum.git'
          url = 'https://github.com/obsidiandynamics/fulcrum'
        }
      }
    }
  }
}

task launch() {
  dependsOn allprojects*.tasks*.findByName("classes"), allprojects*.tasks*.findByName("testClasses")
  doLast {
    def launcherClasses = new ArrayList()
    launcherClasses += "com.obsidiandynamics.launcher.RunSampleApp"
    def baseJvmArgs = "-XX:-MaxFDLimit -XX:+TieredCompilation -XX:+UseNUMA -XX:+UseCondCardMark " + 
                      "-Xms2G -Xmx2G -Xss1M -XX:+UseG1GC -XX:MaxGCPauseMillis=200 " +
                      "-XX:InitiatingHeapOccupancyPercent=0 -Djava.net.preferIPv4Stack=true " + 
                      "-Dlauncher.package.compress.level=3"
    javaexec {
      systemProperties = System.properties
      classpath = sourceSets.main.compileClasspath + sourceSets.main.runtimeClasspath + sourceSets.test.compileClasspath + sourceSets.test.runtimeClasspath
      mainClass = "com.obsidiandynamics.launcher.Launcher"
      args = launcherClasses
      jvmArgs = Arrays.asList baseJvmArgs.split(" ")
      standardInput = System.in
    }
  }
}
