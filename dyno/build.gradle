def packageName = "fulcrum-dyno"
def packageDescription = "Microbenchmarking harness"

dependencies {
  api project(":fulcrum-func")
  compileOnly "org.openjdk.jmh:jmh-core:${jmhVersion}"
  
  annotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"

  testImplementation project(":fulcrum-assert")
  testImplementation project(":fulcrum-resolver")
  testImplementation "org.openjdk.jmh:jmh-core:${jmhVersion}"
}

task copySrc(type: Copy, dependsOn: compileJava) {
  from 'build/generated/source/apt/main/com/obsidiandynamics/dyno/generated'
  into 'src/main/java/com/obsidiandynamics/dyno/generated'
  include '*.java'
}
    
task copyMetaInf(type: Copy, dependsOn: compileJava) {
  from 'build/classes/java/main/META-INF'
  into 'src/main/resources/META-INF'
  include '*'
}

task enableAnn {
  doLast {
    tasks.withType(JavaCompile) {
      aptOptions.annotationProcessing = true
    }
  }
}

task gen(dependsOn: [enableAnn, compileJava, copySrc, copyMetaInf]) {
  // the dependsOn order is non-deterministic; set the task dependencies explicitly
  compileJava.mustRunAfter enableAnn
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = packageName
      from components.java
      pom {
        name = packageName
        description = packageDescription
        url = 'https://github.com/obsidiandynamics/fulcrum'
        licenses {
          license {
            name = 'BSD 3-Clause License'
            url = 'https://opensource.org/licenses/BSD-3-Clause'
          }
        }
        developers {
          developer {
            id = 'ekoutanov'
            name = 'Emil Koutanov'
            email = 'ekoutanov@gmail.com'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/obsidiandynamics/fulcrum.git'
          developerConnection = 'scm:git:ssh://github.com/obsidiandynamics/fulcrum.git'
          url = 'https://github.com/obsidiandynamics/fulcrum'
        }
      }
    }
  }
}
